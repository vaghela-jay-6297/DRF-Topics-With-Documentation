- Here's a detailed explanation of creating a custom authentication backend in Django REST framework (DRF) to allow login 
using either username or email:

1. Purpose and Benefits:
-----------------------
The default Django authentication backend uses usernames for login.
A custom backend can provide flexibility by allowing login using additional identifiers like email addresses.
This approach offers more control over the authentication process


2. Implementation Steps:
------------------------
Ex: auth.py
    from django.contrib.auth.backends import ModelBackend
    from django.contrib.auth import get_user_model

    class EmailOrUsernameBackend(ModelBackend):
        """
        Custom authentication backend that allows login using username or email.
        """

        def authenticate(self, request, username=None, password=None):
            if username is None:
                username = password = None
            else:
                try:
                    user = get_user_model().objects.get(Q(username__iexact=username) | Q(email__iexact=username))
                except get_user_model().DoesNotExist:
                    pass
            if user is not None and user.is_active and self.user_can_authenticate(user):
                if user.check_password(password):
                    return user
            return None

Explanation:
- The EmailOrUsernameBackend inherits from django.contrib.auth.backends.ModelBackend.
- The authenticate method takes the username, password, and request object as arguments.
- If username is None, both username and password are set to None.
- Otherwise, the code attempts to retrieve a user object using either the username or email (converted to lowercase for case-insensitive comparison) with get_user_model().objects.get.
- It then checks if the user exists, is active, and can be authenticated.
- Finally, if the password matches, the user object is returned for successful authentication.
- Otherwise, None is returned.


3. Integration:
---------------
Add your custom backend to the AUTHENTICATION_BACKENDS setting in settings.py:
Ex: settings.py
    AUTHENTICATION_BACKENDS = [
        'your_app.auth.EmailOrUsernameBackend',
        'django.contrib.auth.backends.ModelBackend',  # Keep the default for other authentication methods
    ]

4. Additional Considerations:
-----------------------------
- Security: Consider implementing security best practices like rate limiting to prevent brute-force attacks.
- Error Handling: Provide informative error messages in case of invalid credentials or authentication failures.
- Token-Based Authentication: Integrate a token-based authentication mechanism (e.g., JWT) for session management.

Benefits:
- Enables login flexibility for users.
- Provides more control over the authentication process.

- By creating a custom authentication backend, you can enhance the login experience for your DRF application and 
cater to user preferences when logging in.
